#pragma version >=0.4.0;
#include "imports/op-codes.fc";
#include "imports/params.fc";
#include "imports/helpers.fc";
#include "imports/rebase-jetton-utils.fc";
#include "imports/stdlib.fc";

const int min_tons_for_storage = 10000000; ;; 0.01 TON
const int gas_consumption = 10000000; ;; 0.01 TON

{-
  Storage
  storage#_ shares:VarUInteger 32 owner_address:MsgAddressInt rebase_jetton_master_address:MsgAddressInt rebase_jetton_wallet_code:^Cell = Storage;
-}

(int, slice, slice, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (ds~load_shares(), ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref());
}

() save_data (int shares, slice owner_address, slice rebase_jetton_master_address, cell rebase_jetton_wallet_code) impure inline {
  set_data(pack_rebase_jetton_wallet_data(shares, owner_address, rebase_jetton_master_address, rebase_jetton_wallet_code));
}

() send_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
  int query_id = in_msg_body~load_uint(64);
  int shares_amount = in_msg_body~load_shares();
  slice to_owner_address = in_msg_body~load_msg_addr();
  force_chain(to_owner_address);
  (int shares, slice owner_address, slice rebase_jetton_master_address, cell rebase_jetton_wallet_code) = load_data();

  shares -= shares_amount;

  throw_unless(705, equal_slices(owner_address, sender_address));
  throw_unless(706, shares >= 0);

  cell state_init = calculate_rebase_jetton_wallet_state_init(to_owner_address, rebase_jetton_master_address, rebase_jetton_wallet_code);
  slice to_wallet_address = calculate_rebase_jetton_wallet_address(state_init);
  slice response_address = in_msg_body~load_msg_addr();
  cell custom_payload = in_msg_body~load_dict();
  int forward_ton_amount = in_msg_body~load_coins();
  throw_unless(708, slice_bits(in_msg_body) >= 1);
  slice either_forward_payload = in_msg_body;
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(0)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init);
  var msg_body = begin_cell()
    .store_uint(op_internal_transfer, 32)
    .store_uint(query_id, 64)
    .store_shares(shares_amount)
    .store_slice(owner_address)
    .store_slice(response_address)
    .store_coins(forward_ton_amount)
    .store_slice(either_forward_payload)
    .end_cell();

  msg = msg.store_ref(msg_body);
  int fwd_count = forward_ton_amount ? 2 : 1;
  throw_unless(709, msg_value >
                     forward_ton_amount +
                     fwd_count * fwd_fee +
                     (2 * gas_consumption + min_tons_for_storage));


  send_raw_message(msg.end_cell(), 64);
  save_data(shares, owner_address, rebase_jetton_master_address, rebase_jetton_wallet_code);
}

() receive_tokens (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
  (int shares, slice owner_address, slice rebase_jetton_master_address, cell rebase_jetton_wallet_code) = load_data();
  int query_id = in_msg_body~load_uint(64);
  int shares_amount = in_msg_body~load_shares();
  shares += shares_amount;
  slice from_address = in_msg_body~load_msg_addr();
  slice response_address = in_msg_body~load_msg_addr();
  throw_unless(707,
      equal_slices(rebase_jetton_master_address, sender_address)
      |
      equal_slices(calculate_user_rebase_jetton_wallet_address(from_address, rebase_jetton_master_address, rebase_jetton_wallet_code), sender_address)
  );
  int forward_ton_amount = in_msg_body~load_coins();

  int ton_balance_before_msg = my_ton_balance - msg_value;
  int storage_fee = min_tons_for_storage - min(ton_balance_before_msg, min_tons_for_storage);
  msg_value -= (storage_fee + gas_consumption);
  if(forward_ton_amount) {
    msg_value -= (forward_ton_amount + fwd_fee);
    slice either_forward_payload = in_msg_body;

    var msg_body = begin_cell()
        .store_uint(op_transfer_notification, 32)
        .store_uint(query_id, 64)
        .store_shares(shares_amount)
        .store_slice(from_address)
        .store_slice(either_forward_payload)
        .end_cell();

    var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(owner_address)
      .store_coins(forward_ton_amount)
      .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_ref(msg_body);

    send_raw_message(msg.end_cell(), 1);
  }

  if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
    var msg = begin_cell()
      .store_uint(0x10, 6)
      .store_slice(response_address)
      .store_coins(msg_value)
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op_excesses, 32)
      .store_uint(query_id, 64);
    send_raw_message(msg.end_cell(), 2);
  }

  save_data(shares, owner_address, rebase_jetton_master_address, rebase_jetton_wallet_code);
}

() burn_tokens (slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
  (int shares, slice owner_address, slice rebase_jetton_master_address, cell rebase_jetton_wallet_code) = load_data();
  int query_id = in_msg_body~load_uint(64);
  int shares_amount = in_msg_body~load_shares();
  slice response_address = in_msg_body~load_msg_addr();

  shares -= shares_amount;

  throw_unless(705, equal_slices(owner_address, sender_address));
  throw_unless(706, shares >= 0);
  throw_unless(707, msg_value > fwd_fee + 2 * gas_consumption);

  var msg_body = begin_cell()
      .store_uint(op_burn_notification, 32)
      .store_uint(query_id, 64)
      .store_shares(shares_amount)
      .store_slice(owner_address)
      .store_slice(response_address)
      .end_cell();

  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(rebase_jetton_master_address)
    .store_coins(0)
    .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_ref(msg_body);

  send_raw_message(msg.end_cell(), 64);

  save_data(shares, owner_address, rebase_jetton_master_address, rebase_jetton_wallet_code);
}

() on_bounce (slice in_msg_body) impure {
  in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
  (int shares, slice owner_address, slice rebase_jetton_master_address, cell rebase_jetton_wallet_code) = load_data();
  int op = in_msg_body~load_uint(32);
  throw_unless(709, (op == op_internal_transfer) | (op == op_burn_notification));
  int query_id = in_msg_body~load_uint(64);
  int shares_amount = in_msg_body~load_shares();
  shares += shares_amount;
  save_data(shares, owner_address, rebase_jetton_master_address, rebase_jetton_wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) {
    return ();
  }

  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  if (flags & 1) {
    on_bounce(in_msg_body);
    return ();
  }
  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr();
  cs~load_coins();
  cs~skip_bits(1);
  cs~load_coins();
  int fwd_fee = cs~load_coins();

  int op = in_msg_body~load_uint(32);

  if (op == op_transfer) {
    send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  if (op == op_internal_transfer) {
    receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
    return ();
  }

  if (op == op_burn) {
    burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
    return ();
  }

  throw(0xffff);
}

(int, slice, slice, cell) get_wallet_data() method_id {
  return load_data();
}